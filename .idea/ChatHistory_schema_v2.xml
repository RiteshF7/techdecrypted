<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChatHistoryState">
    <option name="serializedSessions">
      <map>
        <entry key="1aa82f24-f33f-4cef-879d-c72f0ba99eb0" value="{&quot;id&quot;:&quot;1aa82f24-f33f-4cef-879d-c72f0ba99eb0&quot;,&quot;name&quot;:&quot;Adding a new blog post to the productivity series&quot;,&quot;timestamp&quot;:1753682645381,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```textmate:content/blogs/boosting-developer-productivity-daily-habits/index.mdx, lines\u003dALL(1-47)\n---\ntitle: \&quot;Boosting Developer Productivity with Simple Daily Habits\&quot;\ndescription: Discover easy habits and workflow tweaks to get more done as a developer, every single day.\nimage: productivity-habits.jpg\npublishedAt: 2024-06-10 09:00:00\nupdatedAt: 2024-06-10 09:00:00\nauthor: \&quot;yourname\&quot;\nisPublished: true\ntags:\n  - productivity\n  - habits\nslug: boosting-developer-productivity-daily-habits\n---\n\nMost developers know the feeling: the workday ends and you wonder, “where did all my time go?” Improving productivity isn’t just about working harder — it’s about working smarter, with the right habits in place.\n\n## 1. Start with a Plan\n\nBefore you open your code editor, jot down your top 3 priorities for the day. This helps you focus on what matters, not just what’s urgent.\n\n## 2. Use Keyboard Shortcuts\n\nSpend a few minutes learning the key shortcuts of your editor or IDE. For example, [VS Code cheatsheet](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf) can help you perform common actions twice as fast.\n\n## 3. Automate the Boring Stuff\n\nAutomate repetitive tasks using scripts. For example:\n\n```bash\n# A simple bash script to build and deploy your project\nnpm run build \u0026\u0026 npm run deploy\n```\n\nNot only will this save time, but it also reduces errors.\n\n## 4. Take Meaningful Breaks\n\nDon’t code for hours without a break. Use the [Pomodoro Technique](https://francescocirillo.com/pages/pomodoro-technique): 25 minutes focus, 5 minutes break, repeat.\n\n## 5. Keep Learning\n\nSet aside 15 minutes every day to learn something new. Read blogs, watch a video, or try a coding challenge.\n\n---\n\nSmall habits add up over time. What productivity hacks work for you? Share your tips in the comments!\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nscan this project and tell me how can i add new post\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;To help you add a new post, I’ll first scan your project to determine the current setup for blogs/posts, so I can give you clear, actionable instructions.\n\nHere’s what I’ll do:\n\n- Explore your project files/folders to identify where and how blog posts are organized.\n- Check for conventions on file naming, metadata (YAML frontmatter), or post structure.\n- Summarize the steps you need to follow to add a new post.\n\nLet me begin by listing your project’s root directory and the content/blogs subdirectory (where your current post is located) to get a complete picture.&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_RUdetIKjc8O8hVcJbuTibjru&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;list_dir&quot;,&quot;arguments&quot;:&quot;{\&quot;relative_workspace_path\&quot;: \&quot;./\&quot;, \&quot;explanation\&quot;: \&quot;I want to see the structure of the project and identify important directories relevant for blog posts.\&quot;}&quot;}},{&quot;id&quot;:&quot;call_ZaVJa7AWYEB0evVrRolje02k&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;list_dir&quot;,&quot;arguments&quot;:&quot;{\&quot;relative_workspace_path\&quot;: \&quot;content/blogs\&quot;, \&quot;explanation\&quot;: \&quot;I want to check all current blog posts and see how they are organized in the blogs directory.\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;list_dir&quot;,&quot;tool_call_id&quot;:&quot;call_RUdetIKjc8O8hVcJbuTibjru&quot;,&quot;content&quot;:&quot;Contents of directory:\n\n[dir] content/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs/ - Jul 23, 2025 01:20 pm\n[dir] node_modules/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@alloc/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@corex/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@emnapi/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@esbuild/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@eslint-community/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@eslint/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@humanfs/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@humanwhocodes/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@img/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@isaacs/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@jridgewell/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@lottiefiles/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@mdx-js/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@next/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@nodelib/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@nolyfill/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@pkgjs/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@rtsao/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@rushstack/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@shikijs/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@supabase/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@swc/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@tailwindcss/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@types/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@typescript-eslint/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\@ungap/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\acorn-jsx/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\acorn/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\ajv/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\ansi-regex/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\ansi-styles/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\any-promise/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\anymatch/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\arg/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\argparse/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\aria-query/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array-buffer-byte-length/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array-includes/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array.prototype.findlast/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array.prototype.findlastindex/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array.prototype.flat/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array.prototype.flatmap/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\array.prototype.tosorted/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\arraybuffer.prototype.slice/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\ast-types-flow/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\astring/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\autoprefixer/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\available-typed-arrays/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\axe-core/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\axobject-query/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\b4a/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bail/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\balanced-match/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bare-events/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bare-fs/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bare-os/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bare-path/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bare-stream/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\base64-js/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\binary-extensions/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\bl/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\brace-expansion/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\braces/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\browserslist/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\buffer-from/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\buffer/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\busboy/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\call-bind-apply-helpers/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\call-bind/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\call-bound/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\callsites/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\camelcase-css/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\caniuse-lite/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\ccount/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\chalk/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\character-entities-html4/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\character-entities-legacy/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\character-entities/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\character-reference-invalid/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\chokidar/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\chownr/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\client-only/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\collapse-white-space/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\color-convert/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\color-name/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\color-string/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\color/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\comma-separated-tokens/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\commander/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\concat-map/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\cross-spawn/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\cssesc/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\damerau-levenshtein/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\data-view-buffer/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\data-view-byte-length/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\data-view-byte-offset/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\date-fns/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\debug/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\decode-named-character-reference/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\decompress-response/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\deep-extend/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\deep-is/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\define-data-property/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\define-properties/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\dequal/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\detect-libc/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\devlop/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\didyoumean/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\dlv/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\doctrine/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\dunder-proto/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eastasianwidth/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\electron-to-chromium/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\emoji-regex-xs/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\emoji-regex/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\encoding/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\end-of-stream/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\enhanced-resolve/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\entities/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-abstract/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-define-property/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-errors/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-iterator-helpers/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-object-atoms/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-set-tostringtag/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-shim-unscopables/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\es-to-primitive/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\esast-util-from-estree/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\esast-util-from-js/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\esbuild/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\escalade/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\escape-string-regexp/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-config-next/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-import-resolver-node/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-import-resolver-typescript/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-module-utils/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-plugin-import/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-plugin-jsx-a11y/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-plugin-react-hooks/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-plugin-react/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-scope/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint-visitor-keys/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\eslint/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\espree/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\esquery/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\esrecurse/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estraverse/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-util-attach-comments/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-util-build-jsx/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-util-is-identifier-name/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-util-scope/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-util-to-js/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-util-visit/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\estree-walker/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\esutils/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\expand-template/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\extend/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fast-deep-equal/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fast-fifo/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fast-glob/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fast-json-stable-stringify/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fast-levenshtein/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fastq/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\file-entry-cache/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fill-range/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\find-up/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\flat-cache/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\flatted/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\for-each/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\foreground-child/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fraction.js/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\fs-constants/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\function-bind/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\function.prototype.name/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\functions-have-names/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\get-intrinsic/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\get-symbol-description/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\get-tsconfig/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\github-from-package/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\github-slugger/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\glob-parent/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\glob/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\globals/ - Jul 23, 2025 12:53 pm\n[dir] node_modules\\globalthis/ - Jul 23, 2025 12:53 pm\n[dir] public/ - Jul 23, 2025 11:48 am\n[dir] src/ - Jul 23, 2025 11:48 am\n[file] env.local (307B, 2 lines) - Jul 23, 2025 01:01 pm\n[file] jsconfig.json (145B, 8 lines) - Jul 23, 2025 11:48 am\n[file] LICENSE (1.1KB, 21 lines) - Jul 23, 2025 11:48 am\n[file] next-sitemap.config.js (152B, 7 lines) - Jul 23, 2025 11:48 am\n[file] next.config.js (916B, 26 lines) - Jul 23, 2025 11:48 am\n[file] package-lock.json (328.3KB, 8822 lines) - Jul 23, 2025 12:53 pm\n[file] package.json (1.1KB, 42 lines) - Jul 23, 2025 11:48 am\n[file] postcss.config.js (88B, 6 lines) - Jul 23, 2025 11:48 am\n[file] README.md (5.8KB, 65 lines) - Jul 23, 2025 11:48 am\n[file] tailwind.config.js (1.0KB, 43 lines) - Jul 23, 2025 11:48 am\n[file] velite.config.js (1.5KB, 65 lines) - Jul 23, 2025 11:48 am&quot;},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;list_dir&quot;,&quot;tool_call_id&quot;:&quot;call_ZaVJa7AWYEB0evVrRolje02k&quot;,&quot;content&quot;:&quot;Contents of directory:\n\n[dir] content\\blogs\\automating-repetitive-tasks-productivity-hacks-for-developers/ - Jul 23, 2025 01:20 pm\n[dir] content\\blogs\\best-practices-for-writing-clean-and-maintainable-code/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\boosting-developer-productivity-daily-habits/ - Jul 23, 2025 01:21 pm\n[dir] content\\blogs\\building-progressive-web-apps-bridging-the-gap-between-web-and-mobile/ - Jul 23, 2025 01:20 pm\n[dir] content\\blogs\\js-frameworks-comparison/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\mastering-css-grid-layout/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\mindfulness-and-meditation-techniques-for-developers-improving-focus-and-clarity/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\progressive-web-apps-pwa/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\restful-apis-building-blocks/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\web-accessibility-best-practices/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\web-accessibility-inclusive-design/ - Jul 23, 2025 11:48 am\n[dir] content\\blogs\\web-development-tools-productivity/ - Jul 23, 2025 11:48 am\n[file] content\\blogs\\automating-repetitive-tasks-productivity-hacks-for-developers\\c-d-x-PDX_a_82obo-unsplash.jpg (208.1KB, 1384 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\automating-repetitive-tasks-productivity-hacks-for-developers\\emile-perron-xrVDYZRGdw4-unsplash.jpg (217.6KB, 1871 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\automating-repetitive-tasks-productivity-hacks-for-developers\\index.mdx (11.2KB, 218 lines) - Jul 23, 2025 01:20 pm\n[file] content\\blogs\\best-practices-for-writing-clean-and-maintainable-code\\c-d-x-PDX_a_82obo-unsplash.jpg (208.1KB, 1384 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\best-practices-for-writing-clean-and-maintainable-code\\index.mdx (11.2KB, 220 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\best-practices-for-writing-clean-and-maintainable-code\\roman-synkevych-vXInUOv1n84-unsplash.jpg (157.6KB, 1281 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\boosting-developer-productivity-daily-habits\\index.mdx (1.7KB, 46 lines) - Jul 23, 2025 01:21 pm\n[file] content\\blogs\\building-progressive-web-apps-bridging-the-gap-between-web-and-mobile\\charlesdeluvio-cZr2sgaxy3Q-unsplash.jpg (237.1KB, 1875 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\building-progressive-web-apps-bridging-the-gap-between-web-and-mobile\\index.mdx (11.4KB, 220 lines) - Jul 23, 2025 01:20 pm\n[file] content\\blogs\\js-frameworks-comparison\\index.mdx (11.4KB, 221 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\js-frameworks-comparison\\paul-esch-laurent-oZMUrWFHOB4-unsplash.jpg (536.9KB, 4662 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\mastering-css-grid-layout\\index.mdx (11.3KB, 221 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\mastering-css-grid-layout\\kelly-sikkema--1_RZL8BGBM-unsplash.jpg (230.4KB, 1725 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\mindfulness-and-meditation-techniques-for-developers-improving-focus-and-clarity\\c-d-x-PDX_a_82obo-unsplash.jpg (208.1KB, 1384 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\mindfulness-and-meditation-techniques-for-developers-improving-focus-and-clarity\\index.mdx (11.4KB, 218 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\progressive-web-apps-pwa\\carlos-muza-hpjSkU2UYSU-unsplash.jpg (265.4KB, 1904 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\progressive-web-apps-pwa\\index.mdx (11.4KB, 220 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\restful-apis-building-blocks\\index.mdx (11.2KB, 221 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\restful-apis-building-blocks\\luca-bravo-XJXWbfSo2f0-unsplash.jpg (230.5KB, 1626 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\web-accessibility-best-practices\\index.mdx (11.4KB, 220 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\web-accessibility-best-practices\\marvin-meyer-SYTO3xs06fU-unsplash.jpg (469.4KB, 4146 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\web-accessibility-inclusive-design\\christina-wocintechchat-com-OtHEYbQXLFU-unsplash.jpg (154.0KB, 897 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\web-accessibility-inclusive-design\\index.mdx (11.3KB, 221 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\web-development-tools-productivity\\index.mdx (11.3KB, 221 lines) - Jul 23, 2025 11:48 am\n[file] content\\blogs\\web-development-tools-productivity\\lauren-mancke-aOC7TSLb1o8-unsplash.jpg (360.1KB, 2720 lines) - Jul 23, 2025 11:48 am&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Here’s what I found about your project’s blog setup:\n\n- Your blog posts live in: content/blogs/\n- Each post gets its own folder, e.g., boosting-developer-productivity-daily-habits/\n- Each post folder contains an index.mdx file (the post’s content) and usually one or more images.\n- Each index.mdx starts with a frontmatter section (YAML between ---), defining metadata: title, description, image, publishedAt, tags, slug, etc.\n\nTo add a new post, you just need to:\n\n1. Create a new folder inside content/blogs/ for your post, e.g., content/blogs/my-awesome-post/\n2. Inside that new folder, create an index.mdx file with your content and frontmatter.\n3. (Optional) Place any images you want to use in the same folder.\n4. Make sure isPublished: true and set a unique slug—this is typically the folder name.\n\nWould you like a ready-to-use template for your next post\u0027s index.mdx file, or help automating the creation of a new post folder?&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```textmate:content/blogs/boosting-developer-productivity-daily-habits/index.mdx, lines\u003dALL(1-47)\n(file is identical to original version)\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\ncan you make one for me related to android\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Absolutely! I’ll create a new post for you about Android development, following your project’s conventions. Here’s my plan:\n\n- The post will be placed in a new folder under content/blogs/, for example: content/blogs/getting-started-with-android-development/.\n- The post will be called Getting Started with Android Development (or a similar title).\n- It will contain practical tips for new Android developers, daily workflows, and a friendly, actionable tone.\n- I’ll write a suitable frontmatter, a short body, and provide a placeholder for an image.\n\nI’ll proceed to create the folder and a ready-to-edit index.mdx for your new Android-related post.&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_arOI1qUAwx0GsK3JKsTNjNLj&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;content/blogs/getting-started-with-android-development/index.mdx\&quot;,\&quot;instructions\&quot;:\&quot;Create a new Android-focused blog post with typical frontmatter and actionable tips for Android developers.\&quot;,\&quot;code_edit\&quot;:\&quot;---\\ntitle: \\\&quot;Getting Started with Android Development: Essential Tips for New Developers\\\&quot;\\ndescription: Discover key habits, tools, and daily routines to boost your efficiency as a modern Android developer.\\nimage: android-getting-started.jpg\\npublishedAt: 2024-06-11 09:00:00\\nupdatedAt: 2024-06-11 09:00:00\\nauthor: \\\&quot;yourname\\\&quot;\\nisPublished: true\\ntags:\\n  - android\\n  - mobile development\\n  - productivity\\nslug: getting-started-with-android-development\\n---\\n\\nAndroid development is an exciting field, but it can feel overwhelming when you\u0027re just starting out. Here are some practical habits and modern tools to help you succeed:\\n\\n## 1. Master Android Studio Shortcuts\\nLearn the most common shortcuts in Android Studio to refactor, navigate, and code faster. [Official Cheatsheet](https://developer.android.com/studio/intro/keyboard-shortcuts)\\n\\n## 2. Use Emulators Wisely\\nUse multiple device profiles in the Android Emulator to ensure your app works smoothly everywhere. Save common setups for quick access.\\n\\n## 3. Automate Builds and Tests\\nSet up simple Gradle tasks or GitHub Actions to automate builds and run your test suite—saving you time and catching bugs early.\\n\\n## 4. Break Work into Tiny Tasks\\nWrite a short TODO list before you start. Focus on small, actionable items rather than vague big goals.\\n\\n## 5. Never Stop Learning\\nThe Android ecosystem evolves fast! Dedicate 10–15 minutes a day to reading release notes, blog posts, or sample projects like those at [Awesome Android](https://github.com/JStumpp/awesome-android).\\n\\n---\\n\\nWhat tip helped you the most as an Android developer? Share your advice or questions in the comments below!\\n\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_arOI1qUAwx0GsK3JKsTNjNLj&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -1,1 +1,36 @@\n+---\n+title: \&quot;Getting Started with Android Development: Essential Tips for New Developers\&quot;\n+description: Discover key habits, tools, and daily routines to boost your efficiency as a modern Android developer.\n+image: android-getting-started.jpg\n+publishedAt: 2024-06-11 09:00:00\n+updatedAt: 2024-06-11 09:00:00\n+author: \&quot;yourname\&quot;\n+isPublished: true\n+tags:\n+  - android\n+  - mobile development\n+  - productivity\n+slug: getting-started-with-android-development\n+---\n \n+Android development is an exciting field, but it can feel overwhelming when you\u0027re just starting out. Here are some practical habits and modern tools to help you succeed:\n+\n+## 1. Master Android Studio Shortcuts\n+Learn the most common shortcuts in Android Studio to refactor, navigate, and code faster. [Official Cheatsheet](https://developer.android.com/studio/intro/keyboard-shortcuts)\n+\n+## 2. Use Emulators Wisely\n+Use multiple device profiles in the Android Emulator to ensure your app works smoothly everywhere. Save common setups for quick access.\n+\n+## 3. Automate Builds and Tests\n+Set up simple Gradle tasks or GitHub Actions to automate builds and run your test suite—saving you time and catching bugs early.\n+\n+## 4. Break Work into Tiny Tasks\n+Write a short TODO list before you start. Focus on small, actionable items rather than vague big goals.\n+\n+## 5. Never Stop Learning\n+The Android ecosystem evolves fast! Dedicate 10–15 minutes a day to reading release notes, blog posts, or sample projects like those at [Awesome Android](https://github.com/JStumpp/awesome-android).\n+\n+---\n+\n+What tip helped you the most as an Android developer? Share your advice or questions in the comments below!\n+\n```\n\nThe edit was successful with no linter errors.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Your new Android-themed blog post is ready!\n\n- Location: content/blogs/getting-started-with-android-development/index.mdx\n- It includes frontmatter with appropriate metadata, tags, and a placeholder image (android-getting-started.jpg).\n- The content gives actionable tips for new Android developers—covering shortcuts, emulators, automation, task planning, and learning habits.\n\nYou can customize the post further or add an image named android-getting-started.jpg to the folder for the visual.\n\nWould you like help adding an actual image, changing the post content, or anything else?&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```textmate:content/blogs/boosting-developer-productivity-daily-habits/index.mdx, lines\u003dALL(1-47)\n(file is identical to original version)\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nhow do i run and test\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;To run and test your blog (and see the new post live), you’ll generally follow these steps in a typical Next.js (or similar) project like yours:\n\n1. Start the Development Server  \nMost likely, you can run your site locally with:\n```bash\nnpm run dev\n```\nor\n```bash\nyarn dev\n```\nThis will spin up a local development server (usually at http://localhost:3000).\n\n2. Open Your Browser  \nGo to http://localhost:3000 (or the terminal will tell you the exact URL).\nNavigate to your blog section—there should be a list of posts. Your new Android post will appear according to its slug (e.g., /blogs/getting-started-with-android-development).\n\n3. Test Your Changes  \n- Read the post and check formatting.\n- Test links and images.\n- Make sure metadata (title, date) is showing correctly.\n\n4. (If applicable) Automated Tests  \nIf your project has automated tests (like Jest or Cypress), you can run them with:\n```bash\nnpm test\n```\nor\n```bash\nyarn test\n```\nThis will run any unit or integration tests your project has. (If you need help setting up or finding tests, let me know!)\n\nWould you like me to check your package.json to confirm the exact command, or do you want to proceed and try running npm run dev yourself?&quot;}]}]}" />
        <entry key="ff3f8e0d-2cfe-4cc7-9929-7edb8fb5bd3e" value="{&quot;id&quot;:&quot;ff3f8e0d-2cfe-4cc7-9929-7edb8fb5bd3e&quot;,&quot;name&quot;:&quot;Creating a new blog and integrating content with UI&quot;,&quot;timestamp&quot;:1753257059509,&quot;messages&quot;:[{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```textmate:content/blogs/automating-repetitive-tasks-productivity-hacks-for-developers/index.mdx, lines\u003dALL(1-219)\n---\ntitle: \&quot;Automating Repetitive Tasks: Productivity Hacks for Developers\&quot;\ndescription: How to deploy your Next.js apps on Vercel.\nimage: emile-perron-xrVDYZRGdw4-unsplash.jpg\npublishedAt: 2024-05-08 13:00:00\nupdatedAt: 2024-05-08 13:00:00\nauthor: \&quot;codebucks\&quot;\nisPublished: true\ntags:\n- productivity\nslug: automating-repetitive-tasks-productivity-hacks-for-developers\n---\n\nUntil now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\n\nBy default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you _really are_ just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\n\nWe get lots of complaints about it actually, with people regularly asking us things like:\n\n\u003e Why is Tailwind removing the default styles on my `h1` elements? How do I disable this? What do you mean I lose all the other base styles too?\n\u003e We hear you, but we\u0027re not convinced that simply disabling our base styles is what you really want. You don\u0027t want to have to remove annoying margins every time you use a `p` element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either — you want them to look _awesome_, not awful.\n\nThe `@tailwindcss/typography` plugin is our attempt to give you what you _actually_ want, without any of the downsides of doing something stupid like disabling our base styles.\n\nIt adds a new `prose` class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\n\n```html\n\u003carticle className\u003d\&quot;prose\&quot;\u003e\n  \u003ch1\u003eGarlic bread with cheese: What the science tells us\u003c/h1\u003e\n  \u003cp\u003e\n    For years parents have espoused the health benefits of eating garlic bread\n    with cheese to their children, with the food earning such an iconic status\n    in our culture that kids will often dress up as warm, cheesy loaf for\n    Halloween.\n  \u003c/p\u003e\n  \u003cp\u003e\n    But a recent study shows that the celebrated appetizer may be linked to a\n    series of rabies cases springing up around the country.\n  \u003c/p\u003e\n\u003c/article\u003e\n```\n\nFor more information about how to use the plugin and the features it includes, [read the documentation](https://github.com/tailwindcss/typography/blob/master/README.md).\n\n---\n\n## What to expect from here on out\n\nWhat follows from here is just a bunch of absolute nonsense I\u0027ve written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like **bold text**, unordered lists, ordered lists, code blocks, block quotes, _and even italics_.\n\nIt\u0027s important to cover all of these use cases for a few reasons:\n\n1.  We want everything to look good out of the box.\n2.  Really just the first reason, that\u0027s the whole point of the plugin.\n3.  Here\u0027s a third pretend reason though a list with three items looks more realistic than a list with two items.\n\nNow we\u0027re going to try out another header style.\n\n### Typography should be easy\n\nSo that\u0027s a header for you — with any luck if we\u0027ve done our job correctly that will look pretty reasonable.\n\nSomething a wise person once told me about typography is:\n\n\u003e Typography is pretty important if you don\u0027t want your stuff to look like trash. Make it good then it won\u0027t be bad.\n\nIt\u0027s probably important that images look okay here by default as well:\n\n\u003cImage\n  src\u003d\&quot;/blogs/c-d-x-PDX_a_82obo-unsplash-55192b8a.jpg\&quot;\n  width\u003d\&quot;718\&quot;\n  height\u003d\&quot;404\&quot;\n  alt\u003d\&quot;Image\&quot;\n  sizes\u003d\&quot;100vw\&quot;\n/\u003e\n\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\n\nNow I\u0027m going to show you an example of an unordered list to make sure that looks good, too:\n\n- So here is the first item in this list.\n- In this example we\u0027re keeping the items short.\n- Later, we\u0027ll use longer, more complex list items.\n\nAnd that\u0027s the end of this section.\n\n## What if we stack headings?\n\n### We should make sure that looks good, too.\n\nSometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\n\n### When a heading comes after a paragraph …\n\nWhen a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let\u0027s see what a more complex list would look like.\n\n- **I often do this thing where list items have headings.**\n\n  For some reason I think this looks cool which is unfortunate because it\u0027s pretty annoying to get the styles right.\n\n  I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn\u0027t write this way.\n\n- **Since this is a list, I need at least two items.**\n\n  I explained what I\u0027m doing already in the previous list item, but a list wouldn\u0027t be a list if it only had one item, and we really want this to look realistic. That\u0027s why I\u0027ve added this second list item so I actually have something to look at when writing the styles.\n\n- **It\u0027s not a bad idea to add a third item either.**\n\n  I think it probably would\u0027ve been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\n\nAfter this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\n\n## Code should look okay by default.\n\nI think most people are going to use [highlight.js](https://highlightjs.org/) or [Prism](https://prismjs.com/) or something if they want to style their code blocks but it wouldn\u0027t hurt to make them look _okay_ out of the box, even with no syntax highlighting.\n\nHere\u0027s what a default `tailwind.config.js` file looks like at the time of writing:\n\n```js\nmodule.exports \u003d {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n};\n```\n\nHopefully that looks good enough to you.\n\n### What about nested lists?\n\nNested lists basically always look bad which is why editors like Medium don\u0027t even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\n\n1.  **Nested lists are rarely a good idea.**\n    - You might feel like you are being really \&quot;organized\&quot; or something but you are just creating a gross shape on the screen that is hard to read.\n    - Nested navigation in UIs is a bad idea too, keep things as flat as possible.\n    - Nesting tons of folders in your source code is also not helpful.\n2.  **Since we need to have more items, here\u0027s another one.**\n    - I\u0027m not sure if we\u0027ll bother styling more than two levels deep.\n    - Two is already too much, three is guaranteed to be a bad idea.\n    - If you nest four levels deep you belong in prison.\n3.  **Two items isn\u0027t really a list, three is good though.**\n    - Again please don\u0027t nest lists if you want people to actually read your content.\n    - Nobody wants to look at this.\n    - I\u0027m upset that we even have to bother styling this.\n\nThe most annoying thing about lists in Markdown is that `\u003cli\u003e` elements aren\u0027t given a child `\u003cp\u003e` tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\n\n- **For example, here\u0027s another nested list.**\n\n  But this time with a second paragraph.\n\n  - These list items won\u0027t have `\u003cp\u003e` tags\n  - Because they are only one line each\n\n- **But in this second top-level list item, they will.**\n\n  This is especially annoying because of the spacing on this paragraph.\n\n  - As you can see here, because I\u0027ve added a second line, this list item now has a `\u003cp\u003e` tag.\n\n    This is the second line I\u0027m talking about by the way.\n\n  - Finally here\u0027s another list item so it\u0027s more like a list.\n\n- A closing list item, but with no nested list, because why not?\n\nAnd finally a sentence to close off this section.\n\n## There are other elements we need to style\n\nI almost forgot to mention links, like [this link to the Tailwind CSS website](https://tailwindcss.com). We almost made them blue but that\u0027s so yesterday, so we went with dark gray, feels edgier.\n\nWe even included table styles, check it out:\n\n| Wrestler                | Origin       | Finisher           |\n| ----------------------- | ------------ | ------------------ |\n| Bret \&quot;The Hitman\&quot; Hart  | Calgary, AB  | Sharpshooter       |\n| Stone Cold Steve Austin | Austin, TX   | Stone Cold Stunner |\n| Randy Savage            | Sarasota, FL | Elbow Drop         |\n| Vader                   | Boulder, CO  | Vader Bomb         |\n| Razor Ramon             | Chuluota, FL | Razor\u0027s Edge       |\n\nWe also need to make sure inline code looks good, like if I wanted to talk about `\u003cspan\u003e` elements or tell you the good news about `@tailwindcss/typography`.\n\n### Sometimes I even use `code` in headings\n\nEven though it\u0027s probably a bad idea, and historically I\u0027ve had a hard time making it look good. This _\&quot;wrap the code blocks in backticks\&quot;_ trick works pretty well though really.\n\nAnother thing I\u0027ve done in the past is put a `code` tag inside of a link, like if I wanted to tell you about the [`tailwindcss/docs`](https://github.com/tailwindcss/docs) repository. I don\u0027t love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\n\n#### We haven\u0027t used an `h4` yet\n\nBut now we have. Please don\u0027t use `h5` or `h6` in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a `before` pseudo-element to scream at you if you use an `h5` or `h6`.\n\nWe don\u0027t style them at all out of the box because `h4` elements are already so small that they are the same size as the body copy. What are we supposed to do with an `h5`, make it _smaller_ than the body copy? No thanks.\n\n### We still need to think about stacked headings though.\n\n#### Let\u0027s make sure we don\u0027t screw that up with `h4` elements, either.\n\nPhew, with any luck we have styled the headings above this text and they look pretty good.\n\nLet\u0027s add a closing paragraph here so things end with a decently sized block of text. I can\u0027t explain why I want things to end that way but I have to assume it\u0027s because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\n\nWhat I\u0027ve written here is probably long enough, but adding this final sentence can\u0027t hurt.\n\n## GitHub Flavored Markdown\n\nI\u0027ve also added support for GitHub Flavored Mardown using `remark-gfm`.\n\nWith `remark-gfm`, we get a few extra features in our markdown. Example: autolink literals.\n\nA link like www.example.com or https://example.com would automatically be converted into an `a` tag.\n\nThis works for email links too: contact@example.com.\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\ncan you find out how can i make a new blog and how content of blogs are linke dto ui\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;To answer your request, I\u0027ll break this down into two main parts:\n\n1. **How to Make a New Blog Post**\n2. **How Blog Content is Linked to the UI**\n\n---\n\n### 1. How to Make a New Blog Post\n\nBased on your project structure and the example you gave (`content/blogs/automating-repetitive-tasks-productivity-hacks-for-developers/index.mdx`), your blog uses `.mdx` files (Markdown + JSX components) as posts.\n\n**To create a new blog post:**\n- Go to the `content/blogs/` directory.\n- Create a new folder named after your post\u0027s slug (for example, `my-awesome-post`).\n- Inside that folder, create a file named `index.mdx`.\n- Add frontmatter at the top (the area between the `---`), similar to your existing posts, e.g.:\n    ```md\n    ---\n    title: \&quot;My Awesome Post\&quot;\n    description: A short description...\n    image: my-image.jpg\n    publishedAt: 2024-06-10 12:00:00\n    updatedAt: 2024-06-10 12:00:00\n    author: \&quot;yourname\&quot;\n    isPublished: true\n    tags:\n    - tag1\n    slug: my-awesome-post\n    ---\n    ```\n- Beneath the frontmatter, add your Markdown content using plain Markdown and any supported components.\n\n### 2. How Blog Content is Linked to the UI\n\nYour blogs are stored as MDX files in the filesystem. On the UI side, the process usually works like this:\n\n- A backend script, build process, or a utility function scans the `content/blogs/` folder for all `index.mdx` files.\n- For each file, the frontmatter is read to get metadata (title, author, etc.) and the body is compiled to HTML/React components.\n- The blog listing page(s) (like `/blogs` or your homepage) reads the available posts and generates previews or links using frontmatter data.\n- When a user clicks on a blog post link, the page dynamically loads and renders the specific `.mdx` content as a full blog post.\n\n**Typical files or code involved:**\n- A utility for reading the MDX files and parsing frontmatter (could be in a `lib` or `utils` folder, often named something like `getPosts.js`/`getAllPosts.ts`)\n- A component/page for listing all blogs (e.g. `pages/blog/index.tsx`)\n- A dynamic route for individual blog posts (e.g. `pages/blog/[slug].tsx` or similar in Next.js projects)\n\n---\n\n#### Next Steps\n\n- Would you like me to show you exactly where the code for fetching and rendering blogs is in your project?\n- Or do you want detailed instructions on how to add a new MDX blog post, including image usage, tags, etc.?\n\nLet me know which part you want to dive deeper into, or if you want both!&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```textmate:content/blogs/automating-repetitive-tasks-productivity-hacks-for-developers/index.mdx, lines\u003dALL(1-219)\n---\ntitle: \&quot;Automating Repetitive Tasks: Productivity Hacks for Developers\&quot;\ndescription: How to deploy your Next.js apps on Vercel.\nimage: emile-perron-xrVDYZRGdw4-unsplash.jpg\npublishedAt: 2024-05-08 13:00:00\nupdatedAt: 2024-05-08 13:00:00\nauthor: \&quot;codebucks\&quot;\nisPublished: true\ntags: \n- productivity\nslug: automating-repetitive-tasks-productivity-hacks-for-developers\n---\n\nUntil now, trying to style an article, document, or blog post with Tailwind has been a tedious task that required a keen eye for typography and a lot of complex custom CSS.\n\nBy default, Tailwind removes all of the default browser styling from paragraphs, headings, lists and more. This ends up being really useful for building application UIs because you spend less time undoing user-agent styles, but when you _really are_ just trying to style some content that came from a rich-text editor in a CMS or a markdown file, it can be surprising and unintuitive.\n\nWe get lots of complaints about it actually, with people regularly asking us things like:\n\n\u003e Why is Tailwind removing the default styles on my `h1` elements? How do I disable this? What do you mean I lose all the other base styles too?\n\u003e We hear you, but we\u0027re not convinced that simply disabling our base styles is what you really want. You don\u0027t want to have to remove annoying margins every time you use a `p` element in a piece of your dashboard UI. And I doubt you really want your blog posts to use the user-agent styles either — you want them to look _awesome_, not awful.\n\nThe `@tailwindcss/typography` plugin is our attempt to give you what you _actually_ want, without any of the downsides of doing something stupid like disabling our base styles.\n\nIt adds a new `prose` class that you can slap on any block of vanilla HTML content and turn it into a beautiful, well-formatted document:\n\n```html\n\u003carticle className\u003d\&quot;prose\&quot;\u003e\n  \u003ch1\u003eGarlic bread with cheese: What the science tells us\u003c/h1\u003e\n  \u003cp\u003e\n    For years parents have espoused the health benefits of eating garlic bread\n    with cheese to their children, with the food earning such an iconic status\n    in our culture that kids will often dress up as warm, cheesy loaf for\n    Halloween.\n  \u003c/p\u003e\n  \u003cp\u003e\n    But a recent study shows that the celebrated appetizer may be linked to a\n    series of rabies cases springing up around the country.\n  \u003c/p\u003e\n\u003c/article\u003e\n```\n\nFor more information about how to use the plugin and the features it includes, [read the documentation](https://github.com/tailwindcss/typography/blob/master/README.md).\n\n---\n\n## What to expect from here on out\n\nWhat follows from here is just a bunch of absolute nonsense I\u0027ve written to dogfood the plugin itself. It includes every sensible typographic element I could think of, like **bold text**, unordered lists, ordered lists, code blocks, block quotes, _and even italics_.\n\nIt\u0027s important to cover all of these use cases for a few reasons:\n\n1.  We want everything to look good out of the box.\n2.  Really just the first reason, that\u0027s the whole point of the plugin.\n3.  Here\u0027s a third pretend reason though a list with three items looks more realistic than a list with two items.\n\nNow we\u0027re going to try out another header style.\n\n### Typography should be easy\n\nSo that\u0027s a header for you — with any luck if we\u0027ve done our job correctly that will look pretty reasonable.\n\nSomething a wise person once told me about typography is:\n\n\u003e Typography is pretty important if you don\u0027t want your stuff to look like trash. Make it good then it won\u0027t be bad.\n\nIt\u0027s probably important that images look okay here by default as well:\n\n\u003cImage\n  src\u003d\&quot;/blogs/c-d-x-PDX_a_82obo-unsplash-55192b8a.jpg\&quot;\n  width\u003d\&quot;718\&quot;\n  height\u003d\&quot;404\&quot;\n  alt\u003d\&quot;Image\&quot;\n  sizes\u003d\&quot;100vw\&quot;\n/\u003e\n\nContrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old.\n\nNow I\u0027m going to show you an example of an unordered list to make sure that looks good, too:\n\n- So here is the first item in this list.\n- In this example we\u0027re keeping the items short.\n- Later, we\u0027ll use longer, more complex list items.\n\nAnd that\u0027s the end of this section.\n\n## What if we stack headings?\n\n### We should make sure that looks good, too.\n\nSometimes you have headings directly underneath each other. In those cases you often have to undo the top margin on the second heading because it usually looks better for the headings to be closer together than a paragraph followed by a heading should be.\n\n### When a heading comes after a paragraph …\n\nWhen a heading comes after a paragraph, we need a bit more space, like I already mentioned above. Now let\u0027s see what a more complex list would look like.\n\n- **I often do this thing where list items have headings.**\n\n  For some reason I think this looks cool which is unfortunate because it\u0027s pretty annoying to get the styles right.\n\n  I often have two or three paragraphs in these list items, too, so the hard part is getting the spacing between the paragraphs, list item heading, and separate list items to all make sense. Pretty tough honestly, you could make a strong argument that you just shouldn\u0027t write this way.\n\n- **Since this is a list, I need at least two items.**\n\n  I explained what I\u0027m doing already in the previous list item, but a list wouldn\u0027t be a list if it only had one item, and we really want this to look realistic. That\u0027s why I\u0027ve added this second list item so I actually have something to look at when writing the styles.\n\n- **It\u0027s not a bad idea to add a third item either.**\n\n  I think it probably would\u0027ve been fine to just use two items but three is definitely not worse, and since I seem to be having no trouble making up arbitrary things to type, I might as well include it.\n\nAfter this sort of list I usually have a closing statement or paragraph, because it kinda looks weird jumping right to a heading.\n\n## Code should look okay by default.\n\nI think most people are going to use [highlight.js](https://highlightjs.org/) or [Prism](https://prismjs.com/) or something if they want to style their code blocks but it wouldn\u0027t hurt to make them look _okay_ out of the box, even with no syntax highlighting.\n\nHere\u0027s what a default `tailwind.config.js` file looks like at the time of writing:\n\n```js\nmodule.exports \u003d {\n  purge: [],\n  theme: {\n    extend: {},\n  },\n  variants: {},\n  plugins: [],\n};\n```\n\nHopefully that looks good enough to you.\n\n### What about nested lists?\n\nNested lists basically always look bad which is why editors like Medium don\u0027t even let you do it, but I guess since some of you goofballs are going to do it we have to carry the burden of at least making it work.\n\n1.  **Nested lists are rarely a good idea.**\n    - You might feel like you are being really \&quot;organized\&quot; or something but you are just creating a gross shape on the screen that is hard to read.\n    - Nested navigation in UIs is a bad idea too, keep things as flat as possible.\n    - Nesting tons of folders in your source code is also not helpful.\n2.  **Since we need to have more items, here\u0027s another one.**\n    - I\u0027m not sure if we\u0027ll bother styling more than two levels deep.\n    - Two is already too much, three is guaranteed to be a bad idea.\n    - If you nest four levels deep you belong in prison.\n3.  **Two items isn\u0027t really a list, three is good though.**\n    - Again please don\u0027t nest lists if you want people to actually read your content.\n    - Nobody wants to look at this.\n    - I\u0027m upset that we even have to bother styling this.\n\nThe most annoying thing about lists in Markdown is that `\u003cli\u003e` elements aren\u0027t given a child `\u003cp\u003e` tag unless there are multiple paragraphs in the list item. That means I have to worry about styling that annoying situation too.\n\n- **For example, here\u0027s another nested list.**\n\n  But this time with a second paragraph.\n\n  - These list items won\u0027t have `\u003cp\u003e` tags\n  - Because they are only one line each\n\n- **But in this second top-level list item, they will.**\n\n  This is especially annoying because of the spacing on this paragraph.\n\n  - As you can see here, because I\u0027ve added a second line, this list item now has a `\u003cp\u003e` tag.\n\n    This is the second line I\u0027m talking about by the way.\n\n  - Finally here\u0027s another list item so it\u0027s more like a list.\n\n- A closing list item, but with no nested list, because why not?\n\nAnd finally a sentence to close off this section.\n\n## There are other elements we need to style\n\nI almost forgot to mention links, like [this link to the Tailwind CSS website](https://tailwindcss.com). We almost made them blue but that\u0027s so yesterday, so we went with dark gray, feels edgier.\n\nWe even included table styles, check it out:\n\n| Wrestler                | Origin       | Finisher           |\n| ----------------------- | ------------ | ------------------ |\n| Bret \&quot;The Hitman\&quot; Hart  | Calgary, AB  | Sharpshooter       |\n| Stone Cold Steve Austin | Austin, TX   | Stone Cold Stunner |\n| Randy Savage            | Sarasota, FL | Elbow Drop         |\n| Vader                   | Boulder, CO  | Vader Bomb         |\n| Razor Ramon             | Chuluota, FL | Razor\u0027s Edge       |\n\nWe also need to make sure inline code looks good, like if I wanted to talk about `\u003cspan\u003e` elements or tell you the good news about `@tailwindcss/typography`.\n\n### Sometimes I even use `code` in headings\n\nEven though it\u0027s probably a bad idea, and historically I\u0027ve had a hard time making it look good. This _\&quot;wrap the code blocks in backticks\&quot;_ trick works pretty well though really.\n\nAnother thing I\u0027ve done in the past is put a `code` tag inside of a link, like if I wanted to tell you about the [`tailwindcss/docs`](https://github.com/tailwindcss/docs) repository. I don\u0027t love that there is an underline below the backticks but it is absolutely not worth the madness it would require to avoid it.\n\n#### We haven\u0027t used an `h4` yet\n\nBut now we have. Please don\u0027t use `h5` or `h6` in your content, Medium only supports two heading levels for a reason, you animals. I honestly considered using a `before` pseudo-element to scream at you if you use an `h5` or `h6`.\n\nWe don\u0027t style them at all out of the box because `h4` elements are already so small that they are the same size as the body copy. What are we supposed to do with an `h5`, make it _smaller_ than the body copy? No thanks.\n\n### We still need to think about stacked headings though.\n\n#### Let\u0027s make sure we don\u0027t screw that up with `h4` elements, either.\n\nPhew, with any luck we have styled the headings above this text and they look pretty good.\n\nLet\u0027s add a closing paragraph here so things end with a decently sized block of text. I can\u0027t explain why I want things to end that way but I have to assume it\u0027s because I think things will look weird or unbalanced if there is a heading too close to the end of the document.\n\nWhat I\u0027ve written here is probably long enough, but adding this final sentence can\u0027t hurt.\n\n## GitHub Flavored Markdown\n\nI\u0027ve also added support for GitHub Flavored Mardown using `remark-gfm`.\n\nWith `remark-gfm`, we get a few extra features in our markdown. Example: autolink literals.\n\nA link like www.example.com or https://example.com would automatically be converted into an `a` tag.\n\nThis works for email links too: contact@example.com.\n\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\nwrite a sample blog for me\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Here’s a sample blog post you can use. Just copy-paste this into a new file at  \n`content/blogs/your-sample-blog/index.mdx` (or any other folder/slug you want):\n\n```md\n---\ntitle: \&quot;Boosting Developer Productivity with Simple Daily Habits\&quot;\ndescription: Discover easy habits and workflow tweaks to get more done as a developer, every single day.\nimage: productivity-habits.jpg\npublishedAt: 2024-06-10 09:00:00\nupdatedAt: 2024-06-10 09:00:00\nauthor: \&quot;yourname\&quot;\nisPublished: true\ntags:\n  - productivity\n  - habits\nslug: boosting-developer-productivity-daily-habits\n---\n\nMost developers know the feeling: the workday ends and you wonder, “where did all my time go?” Improving productivity isn’t just about working harder — it’s about working smarter, with the right habits in place.\n\n## 1. Start with a Plan\n\nBefore you open your code editor, jot down your top 3 priorities for the day. This helps you focus on what matters, not just what’s urgent.\n\n## 2. Use Keyboard Shortcuts\n\nSpend a few minutes learning the key shortcuts of your editor or IDE. For example, [VS Code cheatsheet](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf) can help you perform common actions twice as fast.\n\n## 3. Automate the Boring Stuff\n\nAutomate repetitive tasks using scripts. For example:\n\n```bash\n# A simple bash script to build and deploy your project\nnpm run build \u0026\u0026 npm run deploy\n```\n\nNot only will this save time, but it also reduces errors.\n\n## 4. Take Meaningful Breaks\n\nDon’t code for hours without a break. Use the [Pomodoro Technique](https://francescocirillo.com/pages/pomodoro-technique): 25 minutes focus, 5 minutes break, repeat.\n\n## 5. Keep Learning\n\nSet aside 15 minutes every day to learn something new. Read blogs, watch a video, or try a coding challenge.\n\n---\n\nSmall habits add up over time. What productivity hacks work for you? Share your tips in the comments!\n\n```\n\nYou can change the frontmatter details (title, slug, dates, image, and tags) and the content as you wish!  \nImages should be placed in your public/images or public/blogs folder (wherever your site expects).\n\nLet me know if you want an even more technical example, or a different topic!&quot;}]},{&quot;role&quot;:&quot;user&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;\n\u003cadditional_data\u003e\nBelow are some potentially helpful/relevant pieces of information for figuring out to respond\n\u003ccurrent_file\u003e\n```textmate:content/blogs/automating-repetitive-tasks-productivity-hacks-for-developers/index.mdx, lines\u003dALL(1-219)\n(file is identical to original version)\n```\n\u003c/current_file\u003e\n\u003c/additional_data\u003e\n\u003cuser_query\u003e\ndo it for me\n\u003c/user_query\u003e&quot;}]},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;I\u0027ll create a new sample blog post for you in the correct format. Here’s what I’ll do:\n\n1. Make a new folder: `content/blogs/boosting-developer-productivity-daily-habits/`\n2. Create the file: `index.mdx` inside this folder.\n3. Add a sample blog post as shown earlier, ready for your site.\n\nLet me proceed with this now.&quot;}],&quot;tool_calls&quot;:[{&quot;id&quot;:&quot;call_yQcQNxqK49uCfgEQZUWpLj9W&quot;,&quot;type&quot;:&quot;function&quot;,&quot;function&quot;:{&quot;name&quot;:&quot;edit_file&quot;,&quot;arguments&quot;:&quot;{\&quot;target_file\&quot;:\&quot;content/blogs/boosting-developer-productivity-daily-habits/index.mdx\&quot;,\&quot;instructions\&quot;:\&quot;Create a new sample blog post file with appropriate frontmatter and example content focused on daily habits for developer productivity.\&quot;,\&quot;code_edit\&quot;:\&quot;---\\ntitle: \\\&quot;Boosting Developer Productivity with Simple Daily Habits\\\&quot;\\ndescription: Discover easy habits and workflow tweaks to get more done as a developer, every single day.\\nimage: productivity-habits.jpg\\npublishedAt: 2024-06-10 09:00:00\\nupdatedAt: 2024-06-10 09:00:00\\nauthor: \\\&quot;yourname\\\&quot;\\nisPublished: true\\ntags:\\n  - productivity\\n  - habits\\nslug: boosting-developer-productivity-daily-habits\\n---\\n\\nMost developers know the feeling: the workday ends and you wonder, “where did all my time go?” Improving productivity isn’t just about working harder — it’s about working smarter, with the right habits in place.\\n\\n## 1. Start with a Plan\\n\\nBefore you open your code editor, jot down your top 3 priorities for the day. This helps you focus on what matters, not just what’s urgent.\\n\\n## 2. Use Keyboard Shortcuts\\n\\nSpend a few minutes learning the key shortcuts of your editor or IDE. For example, [VS Code cheatsheet](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf) can help you perform common actions twice as fast.\\n\\n## 3. Automate the Boring Stuff\\n\\nAutomate repetitive tasks using scripts. For example:\\n\\n```bash\\n# A simple bash script to build and deploy your project\\nnpm run build \u0026\u0026 npm run deploy\\n```\\n\\nNot only will this save time, but it also reduces errors.\\n\\n## 4. Take Meaningful Breaks\\n\\nDon’t code for hours without a break. Use the [Pomodoro Technique](https://francescocirillo.com/pages/pomodoro-technique): 25 minutes focus, 5 minutes break, repeat.\\n\\n## 5. Keep Learning\\n\\nSet aside 15 minutes every day to learn something new. Read blogs, watch a video, or try a coding challenge.\\n\\n---\\n\\nSmall habits add up over time. What productivity hacks work for you? Share your tips in the comments!\\n\&quot;}&quot;}}]},{&quot;role&quot;:&quot;tool&quot;,&quot;name&quot;:&quot;edit_file&quot;,&quot;tool_call_id&quot;:&quot;call_yQcQNxqK49uCfgEQZUWpLj9W&quot;,&quot;content&quot;:&quot;The apply model made the following changes to the file:\n\n```\n@@ -1,1 +1,47 @@\n+---\n+title: \&quot;Boosting Developer Productivity with Simple Daily Habits\&quot;\n+description: Discover easy habits and workflow tweaks to get more done as a developer, every single day.\n+image: productivity-habits.jpg\n+publishedAt: 2024-06-10 09:00:00\n+updatedAt: 2024-06-10 09:00:00\n+author: \&quot;yourname\&quot;\n+isPublished: true\n+tags:\n+  - productivity\n+  - habits\n+slug: boosting-developer-productivity-daily-habits\n+---\n \n+Most developers know the feeling: the workday ends and you wonder, “where did all my time go?” Improving productivity isn’t just about working harder — it’s about working smarter, with the right habits in place.\n+\n+## 1. Start with a Plan\n+\n+Before you open your code editor, jot down your top 3 priorities for the day. This helps you focus on what matters, not just what’s urgent.\n+\n+## 2. Use Keyboard Shortcuts\n+\n+Spend a few minutes learning the key shortcuts of your editor or IDE. For example, [VS Code cheatsheet](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf) can help you perform common actions twice as fast.\n+\n+## 3. Automate the Boring Stuff\n+\n+Automate repetitive tasks using scripts. For example:\n+\n+```bash\n+# A simple bash script to build and deploy your project\n+npm run build \u0026\u0026 npm run deploy\n+```\n+\n+Not only will this save time, but it also reduces errors.\n+\n+## 4. Take Meaningful Breaks\n+\n+Don’t code for hours without a break. Use the [Pomodoro Technique](https://francescocirillo.com/pages/pomodoro-technique): 25 minutes focus, 5 minutes break, repeat.\n+\n+## 5. Keep Learning\n+\n+Set aside 15 minutes every day to learn something new. Read blogs, watch a video, or try a coding challenge.\n+\n+---\n+\n+Small habits add up over time. What productivity hacks work for you? Share your tips in the comments!\n+\n```\n\nThe edit was successful with no linter errors.&quot;},{&quot;role&quot;:&quot;assistant&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;Your new sample blog post has been created at:\n\n**`content/blogs/boosting-developer-productivity-daily-habits/index.mdx`**\n\nIt\u0027s ready to be used!  \nYou can now view, edit, or publish this post via your project\u0027s usual workflow, and it should show up alongside your other blogs in the UI.\n\nIf you want to change any details (like the author, title, date, or image), you can simply edit the frontmatter. Need another example or want to preview how it appears on your site? Let me know!&quot;}]}]}" />
      </map>
    </option>
  </component>
</project>